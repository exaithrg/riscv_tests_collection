tc1：初始化顺利，现在就是如何保证首先链接start.s
tc2：用$(ELF): start.o $(filter-out start.o, $(OBJS))保证了start在前。
tc3：发现编译如果有jump to main等字符的话会试图向0x8000000地址跳转，这在硬件没有特意实现向80跳就是向ROM的00跳的时候会造成跳转错误。因此我们修改了链接脚本，让text段从0开始并让data段从A开始，然后靠Makefile的后处理将data段也设置为从0开始，这样可以实现同时初始化RAM和ROM。
tc4：按tc3的做法，编译出来的指令又会反复试图访问data段，这是不存在的，那么只能强行尝试把data和text放在一起试试
tc5：还是不行，我是真的服，那么尝试把data段搞小一点，然后这次开始认真的按指令debug
tc6：发现tc5不行，然后tc4还没试过，重新交tc4。
tc7：通过在CPU中设置：.addr({1'b0,PCF[30:0]}), ，有可能能解决让0x8000的问题。长使英雄泪满襟（changsyx尝试一下）。
tc8：发现忘了替换0x80000了，重新交
tca1：开始尝试添加addd的内联汇编，反复报错：
➜  custom_addd git:(main) ✗ mk   
riscv64-unknown-elf-gcc -march=rv32i -mabi=ilp32 -nostdlib -c -o start.o start.s
riscv64-unknown-elf-gcc -march=rv32i -mabi=ilp32 -nostdlib -c -o addd.o addd.c
addd.c: Assembler messages:
addd.c:4: Error: unrecognized opcode `addd a5,a5,a4'
make: *** [Makefile:42: addd.o] Error 1

tca2：
改用简单的insn格式。
".insn r 0x0b, 0x5, 0x55, %0, %1, %2"
编译生成通过。

tca3：
开始测试ADDD的生成代码对不对。

tca4：
总之我们确认了一点：编译器永远是对的，只要代码执行不对，那肯定是核实现错了。
这个版本和tca3的区别是选择return 5050而不是return ADDD的结果

tca5：
选择了5050-1的例子，来明确体现ADD和我自己新加入的ADDD指令的区别

tca6：【IMPORTANT】【重要更新】
CUSTOM_ADDD的INSN版本测试通过！

tcab1：
tca6改名，叫custom_addd_binutils
目标是支持定制化的riscv64-addd-elf-gcc

tcab2：
支持了定制化的riscv32-addd-elf-gcc
然后由于这个编译器本身就是-march=rv32i -mabi=ilp32
所以删掉了Makefile中关于架构的这个配置。
编译出来的main_text.hex和insn版本完全一致
.dis里面出现了addd命令
证明一切成功。

tcab3：
通过对start.s的修改，进一步证明了在修了binutils之后，我们可以直接在汇编里面写addd，工具链可以识别。

tcab4：
上一个修改对addd的功能演示不明显。改了。

tcab5：
忘记编译tcab4了。这个交了就不做了，睡觉了。

tcab6：
最终决定的测试样例。
把5050存到t0，这样比较有震撼的效果
然后把t1作为loop count【负数】
t2作为addd t2,t1,zero的结果存储，体现addd的右移1位。

tcab7：
修改tcab6中t0无法得到13ba的问题，看看能不能改成功。

tcab8：
完全成功版本。和tcab7一样，在na17上测试通过。注意t0不是5050，而是因为main.c选择了return add2，所以t0被设置为0x800009DC
