1：正式开始正经更新本仓库，首先添加一套基础的基于riscv toolchain的add函数从编译到生成.hex/.dis的流程
2：把跑不通的https://github.com/q77190858/Rv32iMulticycleCPU测试样例挪到useless
3: 支持openremote
4：第一版单输入rvencoder
5：第二版多输入rvencoder
6：真正的rvencoder，bash脚本版，不是函数。彻底不用bc或者printf的hex2bin。很好，就这样。
7：rvencoder开发完毕，代码被引入.aliases，但是不支持bash。不支持bash以及decoder的格式和二进制问题在dotfiles中解决。
8：REFACTOR：添加deilt的ref tests
9：添加lsutests，用来测试load和store指令，注意，依然采用了start+main的形式
10：经历了lsutests之后，决定通过修改sp初值的方式保证add_elf代码中不可能出现向负地址进行读写的语句
11：add_elf的更新版，不再出现读写负地址
12：基于https://riscvasm.lucasteske.dev/拿到了完整的lucasteske链接脚本和汇编语言
13：将tests拷贝到：\\wsl.localhost\Ubuntu-22.04\home\geng\GitHubRepos\exaithrg\riscv_tests_collection\tests\references\RV32NAvi349\tests
14：custom_addd测试一号：直接拷贝lucasteske看看能不能在RV32NAvi349上跑通
15：IMPORTANT：彻底修了custom_addd，包括链接脚本，RAM和ROM的读写权限和起始地址，同时修改boot.s为贼复杂的测试样例，测试许多很难的hazard情况，我决定管这个测试叫feedcafe。
16：增加测试的难度
17：难以置信，测试一点问题都没有，我们的软件到硬件已经打通了！因此，我们把没问题的软件工具链放到了riscv_tests_collection/tests/modi_lucasteske，这个其实就是custom_addd的直接复制，因为custom_addd要用于设计自定义指令addd了！开始设计自定义指令addd！
18：【IMPORTANT】【重要更新】
我们已经完成了start.s + main.c格式的工具包，存储在riscv_tests_collection/tests/gauss_5050，该函数的作用是计算从1加到100，并在计算完成、返回之后陷入死循环。同时，我们还完善了feedcafe，用来从RAM里面读取一个16进制数feedcafe并且以大量的互相冲突的lw/sw/addi/add指令来验证流水线hazard处理是否正确。
因此，在18号更新之后，我们基本完成了如下两个重要测试：
riscv_tests_collection/tests/read_feedcafe：只有一个.s汇编文件，可以自己手写汇编，当前用来测试RAM读写和Forwarding正确性。
riscv_tests_collection/tests/gauss_5050：具有标准的start.s和main.c，用于计算从1加到100，链接脚本配置了完整的堆栈和RAM/ROM，用来测试CPU是否支持从0x8000开始的ROM和从0x0000开始的RAM，以及对bge/jalr/jal指令的支持。
同时我们复制了gauss_5050为custom_addd，用来作为内联汇编学习RISC-V自定义指令的第一个测试。
19:
发现【18】的Makefile有bug（虽然生成的.hex是正确的），主要是link脚本改名了Makefile没跟上。修复了
20：
我们现在有了两套工具链：
一套通用的riscv64-unknown-elf系列
一套专门加了ADDD的内联汇编的riscv64-addd-elf系列
因此对应的，我们把custom_addd复制了两份
原来的custom_addd改名叫custom_addd_insn，意思是用insn来完成自定义指令
然后加一个新的custom_addd_binutils，意思是把工具链一起改了
下面就是开发custom_addd_binutils了。
21:
add author to main.c in gauss_5050
